package com.damianosiak.Controller;

import com.damianosiak.Main;
import com.damianosiak.Model.Student;
import com.damianosiak.View.View;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;


import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

/**
 * This class is responsible for all mechanisms who control methods available in this application
 */

public class Controller {
    public static List<Student> students = new ArrayList<>();

    /**
     * This method is responsible for reading startup arguments and running application
     */
    public static void startup(){
        if(Main.savedArgs.length==0){
            View.displayHelp();
        }else if(Main.savedArgs.length==1){
            if(Main.savedArgs[0].equals("-h")){
                View.displayHelp();
            }else if(Main.savedArgs[0].equals("-m")){
                View.displayMenu();
            }else if(Main.savedArgs[0].equals("-c")){
                View.displayCreateStudentForm();
            }else if(Main.savedArgs[0].equals("-r")){
                View.displayReadAllStudentsPanel();
            }else if(Main.savedArgs[0].equals("-x")){
                Controller.createStudent("Mike","Tyson","New York","Brooklyn","+1-212-555-0117",1966,30,6);
                Controller.createStudent("Will","Smith","Philadelphia","Secret","+1-267-555-0141",1968,25,9);
                Controller.createStudent("Scarlett","Johansson","New York","Manhattan","+1-212-555-0145",1984,22,11);
                Controller.createStudent("Johny","Depp","Owensboro","Secret","+1-270-555-0142",1963,9,6);
                Controller.createStudent("Jennifer","Aniston","Los Angeles","Sherman Oaks","+1-213-555-0167",1969,11,2);
                Controller.createStudent("Brad","Pitt","Shawnee","Secret","+1-405-555-0108",1963,18,12);
                System.out.println("Success - autogenerated students was added to DB");
                pressAnyKeyToContinue();
            }else{
                System.out.println("Incorrect run argument!");
                pressAnyKeyToContinue();
            }
        }else if(Main.savedArgs.length==2){
            if(Main.savedArgs[0].equals("-g") && Integer.parseInt(Main.savedArgs[1])>0){
                for(int i=1;i<=Integer.parseInt(Main.savedArgs[1]);i++){
                    generateStudent("null");
                }
                System.out.println("Success - autogenerated students was added to DB");
                pressAnyKeyToContinue();
            }else if(Main.savedArgs[0].equals("-db") && Main.savedArgs[1].length()>0){
                String filename = Main.savedArgs[1]+".json";
                loadDB(true,filename);
            }
        }
        else{
            System.out.println("Incorrect run argument!");
            pressAnyKeyToContinue();
        }
    }

    /**
     * This method is responsible for creating new student by given parameters
     * @param studentFirstName
     * @param studentLastName
     * @param studentCity
     * @param studentAddress
     * @param studentPhoneNumber
     * @param studentBirthdayYear
     * @param studentBirthdayDay
     * @param studentBirthdayMonth
     */
    public static void createStudent(String studentFirstName, String studentLastName, String studentCity, String studentAddress, String studentPhoneNumber, Integer studentBirthdayYear, Integer studentBirthdayDay, Integer studentBirthdayMonth){
        Student student = new Student(studentFirstName, studentLastName, studentCity, studentAddress, studentPhoneNumber, studentBirthdayYear, studentBirthdayDay, studentBirthdayMonth);
        students.add(student);
    }

    /**
     * This method is responsible for reading specific student information by id
     * @param id
     * @return
     */
    public static Student readStudent(Integer id){
        return students.get(id);
    }

    /**
     * This method is responsible for updating exist student by given parameters
     * @param id
     * @param studentFirstName
     * @param studentLastName
     * @param studentCity
     * @param studentAddress
     * @param studentPhoneNumber
     * @param studentBirthdayYear
     * @param studentBirthdayDay
     * @param studentBirthdayMonth
     */
    public static void updateStudent(Integer id, String studentFirstName, String studentLastName, String studentCity, String studentAddress, String studentPhoneNumber, Integer studentBirthdayYear, Integer studentBirthdayDay, Integer studentBirthdayMonth){
        students.get(id).setStudentFirstName(studentFirstName);
        students.get(id).setStudentLastName(studentLastName);
        students.get(id).setStudentCity(studentCity);
        students.get(id).setStudentAddress(studentAddress);
        students.get(id).setStudentPhoneNumber(studentPhoneNumber);
        students.get(id).setStudentBirthdayYear(studentBirthdayYear);
        students.get(id).setStudentBirthdayDay(studentBirthdayDay);
        students.get(id).setStudentBirthdayMonth(studentBirthdayMonth);
    }

    public static void deleteStudent(int id){
        students.remove(id);
    }

    /**
     * This method is responsible for adding specific student to specific class by id
     * @param id
     * @param classId
     */
    public static void addStudentToClass(Integer id, String classId){
        students.get(id).setStudentClass(Student.StudentClass.valueOf(classId));
    }

    /*public static void autogenerateStudents(){
        Controller.createStudent("Mike","Tyson","New York","Brooklyn","+1-212-555-0117",1966,30,6);
        Controller.createStudent("Will","Smith","Philadelphia","Secret","+1-267-555-0141",1968,25,9);
        Controller.createStudent("Scarlett","Johansson","New York","Manhattan","+1-212-555-0145",1984,22,11);
        Controller.createStudent("Johny","Depp","Owensboro","Secret","+1-270-555-0142",1963,9,6);
        Controller.createStudent("Jennifer","Aniston","Los Angeles","Sherman Oaks","+1-213-555-0167",1969,11,2);
        Controller.createStudent("Brad","Pitt","Shawnee","Secret","+1-405-555-0108",1963,18,12);
    }*/

    /**
     * This method is responsible for clearing console
     */
    public final static void clearConsole(){
        try{
            final String os = System.getProperty("os.name");
            if(os.contains("Windows")){
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            }else{
                Runtime.getRuntime().exec("clear");
            }
        }
        catch (final Exception e) {
            System.out.println("error");
        }
    }

    /**
     * This method is responsible for waiting for when user press ENTER button and after that main menu is displayed
     */
    public static void pressAnyKeyToContinue(){
        System.out.println("\nPress \"ENTER\" to continue...");
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        View.displayMenu();
    }

    /**
     * This method is responsible for generating random student by gender - if gender is not male or female, then gender is also random.
     * Method contains collections of predefined male first names, female first names, last names, cities and addresses - all values is randomly chosen.
     * Phone number, birthday year, birthday day and birthday month is randomly generated.
     * This method is executing in new thread (contains lambda function)
     * @param gender
     */
    public static void generateStudent(String gender){
        Thread thread = new Thread(()->{
            List<String> maleFirstNames = List.of("Brian","Max","Peter","Mike","Jason","Will","Leonardo","Denzel","Jack","Tom","Johny","Clint","Morgan","John","James","Gregory","Clark","Bruce","Henry","Jake");
            List<String> femaleFirstNames = List.of("Jodie","Michelle","Nicole","Jennifer","Julia","Grace","Julianne","Diane","Scarlett","Jessica","Anne","Angelina","Bette","Amy","Kim","Judy","Holly","Mia","Kristen","Doris");
            List<String> lastNames = List.of("Davis","Taylor","Crawford","Moore","Hightower","Lopez","Fisher","Huston","Basinger","Gish","Huner","Field","Barrymore","Moore","Roberts","Hathaway","Lange","Foster","Aniston","Kidman","Washington","Hanks","Jackson","Depp","Smith","Streap","Hoffman","Freeman","Nicholson","Pitt","Wills","Wayne","Ford","Redford","Newman","Dean","Monroe","Bogar","Grant","Amos","Douglas","Cooper","Stewart","Clift","Hackman","Gibson");
            List<String> cities = List.of("Los Angeles","New York","Chicago","Atlanta","Tampa","Houston","Miami","New Jersey","Washington","Austin","Wisconsin","San Francisco","San Diego","Las Vegas","Colorado Springs","Dallas","Michigan","Philadelphia","Boston","Denver","Detroit","Seattle","San Jose","Indianapolis","Portland","Sacramento","El Paso","San Antonio","Kansas City","Nashville","Charlotte","Jacksonville","Orlando","Victoria","Phoenix","Minneapolis","Tucson","Honolulu","New Orleans");
            List<String> addresses = List.of("Huntington Park","Alhambra","El Monte","Monterey Park","Santa Monica","Inglewood","Westmont","South Gate","Beverly Hills","Westwood","Hollywood","Brentwood","West Covina","Vincent","Citrus","Rosemead","Pasadena","South San Jose Hills","Hacienda Heights","Brooklyn","Crown Center","Midtown - Westport","East Side","Blue Summit","Richmond","Clayton","University City","Grandview Heights","Blacklick Estates","Grove City","Lincoln Village","Wildwoods","Mint Hills","Manhattan","Edison","Hempstead","Hicksville");

            Random rand = new Random();

            String firstName;
            String lastName;
            String city;
            String address;
            String phoneNumber;
            Integer birthdayYear;
            Integer birthdayDay;
            Integer birthdayMonth;

            if(gender.equals("Male") || gender.equals("male") || gender.equals("M") || gender.equals("m")){
                firstName = maleFirstNames.get(rand.nextInt(maleFirstNames.size()));
            }else if(gender.equals("Female") || gender.equals("female") || gender.equals("F") || gender.equals("f")){
                firstName = femaleFirstNames.get(rand.nextInt(femaleFirstNames.size()));
            }else{
                int randomGender = rand.nextInt(2);
                if(randomGender==1){
                    firstName = maleFirstNames.get(rand.nextInt(maleFirstNames.size()));
                }else{
                    firstName = femaleFirstNames.get(rand.nextInt(femaleFirstNames.size()));
                }
            }
            lastName = lastNames.get(rand.nextInt(lastNames.size()));
            city = cities.get(rand.nextInt(cities.size()));
            address = addresses.get(rand.nextInt(addresses.size()));
            phoneNumber="+1-"+rand.nextInt(10)+rand.nextInt(10)+rand.nextInt(10)+"-"+rand.nextInt(10)+rand.nextInt(10)+rand.nextInt(10)+"-"+rand.nextInt(10)+rand.nextInt(10)+rand.nextInt(10)+rand.nextInt(10);
            Integer birthdayYearMax=2004;
            Integer birthdayYearMin=1940;
            birthdayYear=rand.nextInt(birthdayYearMax-birthdayYearMin+1)+birthdayYearMin;
            birthdayDay=rand.nextInt(31-1+1)+1;
            birthdayMonth=rand.nextInt(12-1+1)+1;

            Controller.createStudent(firstName,lastName,city,address,phoneNumber,birthdayYear,birthdayDay,birthdayMonth);
            System.out.println("Success - autogenerated student ("+firstName+" "+lastName+") was added to DB");
        });
        thread.start();
        try{
            thread.join();
        }catch (InterruptedException e){
            System.out.println("Error: cannot create student in new thread");
        }
    }

    /**
     * This method is responsible for saving database to json file
     * Method is executing in new thread (contains lambda function)
     * @param fileName
     */
    public static void saveDB(String fileName){
        Thread thread = new Thread(()-> {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                objectMapper.writeValue(new File(fileName + ".json"), students);
                System.out.println("\nDB was successfully saved to file!");
            } catch (Exception e) {
                System.out.println("\nFailed to save DB to file!");
            }
        });
        thread.start();
        try{
            thread.join();
        }catch (InterruptedException e){
            System.out.println("Error: cannot save DB in new thread");
        }
        pressAnyKeyToContinue();
    }

    /**
     * This method is responsible for import saved database from json file
     * Method is executing in new thread (contains lambda function)
     * @param clearDB
     * @param fileName
     */
    public static void loadDB(Boolean clearDB, String fileName){
        Thread thread = new Thread(()-> {
            try {
                if (clearDB==true) {
                    students.clear();
                }
                ObjectMapper objectMapper = new ObjectMapper();
                String baza = new BufferedReader(new FileReader(fileName)).readLine();
                List<Student> tempDBlistFromFile = objectMapper.readValue(baza, new TypeReference<List<Student>>(){});
                students.addAll(tempDBlistFromFile);
                System.out.println("\nDB was successfully imported from file!");
            } catch (Exception e) {
                System.out.println("\nFailed to load DB from file!\n"+e);
            }
        });
        thread.start();
        try{
            thread.join();
        }catch (InterruptedException e){
            System.out.println("Error: cannot load DB in new thread");
        }
        pressAnyKeyToContinue();
    }
}
